>>> from books_and_authors_app.models import *
>>> Author.objects.all()
<QuerySet []>
>>> Book.objects.all()
<QuerySet []>
>>> Book.objects.create(title = 'c Sharp' ,description = 'c sharp language')
<Book: Book object (1)>
>>> Book.objects.create(title = 'Java' ,description = 'Java language')
<Book: Book object (2)>
>>> Book.objects.create(title = 'python' ,description = 'Python language')
<Book: Book object (3)>
>>> Book.objects.create(title = 'PHP' ,description = 'PHP language')
<Book: Book object (4)>
>>> Book.objects.create(title = 'Ruby' ,description = 'Ruby language')
<Book: Book object (5)>
----------------------------------------------
>>> Author.objects.create(first_name = 'Jane',last_name = 'Austen')
<Author: Author object (1)>
>>> Author.objects.create(first_name = 'Emily',last_name = 'Dickinson')
<Author: Author object (2)>
>>> Author.objects.create(first_name = 'Fyodor',last_name = 'Dostovsky')
<Author: Author object (3)>
>>> Author.objects.create(first_name = 'William',last_name = 'Shakespeare')
<Author: Author object (4)>
>>> Author.objects.create(first_name = 'Lau',last_name = 'Tzu')
<Author: Author object (5)>
----------------------------------------------
(py3Env) ➜  books_and_authors_project python manage.py makemigrations
You are trying to add a non-nullable field 'notes' to author without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> default notes'^[[D^[[D
Invalid input: unterminated string literal (detected at line 1) (<string>, line 1)
>>> 'old notes'
Migrations for 'books_and_authors_app':
  books_and_authors_app/migrations/0003_author_notes.py
    - Add field notes to author
(py3Env) ➜  books_and_authors_project python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, books_and_authors_app, contenttypes, sessions
Running migrations:
  Applying books_and_authors_app.0003_author_notes... OK
---------------------------------------------------------
>>> book1 = Book.objects.get(id=1)
>>> book1.title
'c Sharp'
>>> book1.title = 'C #'
>>> book1.save()
>>> book1
<Book: Book object (1)>
---------------------------------------------
>>> Author.objects.get(id=4)
<Author: Author object (4)>
>>> author1 = Author.objects.get(id=4)
>>> author1.first_name
'William'
>>> author1.first_name = 'Bill'
>>> author1.save()
>>> author1.first_name
'Bill'
------------------------------------------------
>>> author1 = Author.objects.get(id=1)
>>> author1.books
<django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager object at 0x104bcbb10>
>>> author1.books.all()
<QuerySet []>
>>> book1 = Book.objects.get(id=1)
>>> book2 = Book.objects.get(id=2)
>>> author1.books.add(book1)
>>> author1.books.add(book2)
>>> author1.books.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>]>
------------------------------------------------
>>> auhtor2 = Author.objects.get(id=2)
>>> book3 = Book.objects.get(id=3)
>>> author2.books.add(book1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'author2' is not defined
>>> auhtor2.books.add(book1)
>>> auhtor2.books.add(book2)
>>> auhtor2.books.add(book3)
>>> auhtor2.books.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>]>
------------------------------------------------
>>> book4 = Book.objects.get(id=4)
>>> auhtor3.books.add(book1)
>>> auhtor3.books.add(book2)
>>> auhtor3.books.add(book3)
>>> auhtor3.books.add(book4)
>>> auhtor3.books.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>]>
------------------------------------------------
>>> author4 = Author.objects.get(id=4)
>>> for book in Book.objects.all():
...     author4.books.add(book)
...
>>> author4.books
<django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager object at 0x104b6dd10>
>>> author4.books.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>, <Book: Book object (5)>]>
------------------------------------------------
>>> for author in book3.authors.all():
...     print(author.first_name)
...
Emily
Fyodor
Bill
------------------------------------------------
>>> book3.authors.first()
<Author: Author object (2)>
>>> first_author_book3 = book3.authors.first()
>>> book3.authors.remove(first_author_book3)
>>> book3.authors.all()
<QuerySet [<Author: Author object (3)>, <Author: Author object (4)>]>
------------------------------------------------
>>> author5 = Author.objects.get(id=5)
>>> book2.auhtors.add(author5)
>>> book2.authors.add(author5)
>>> book2.authors.all()
<QuerySet [<Author: Author object (1)>, <Author: Author object (2)>, <Author: Author object (3)>, <Author: Author object (4)>, <Author: Author object (5)>]>
------------------------------------------------
>>> auhtor3.books.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>]>
>>> for book in auhtor3.books.all():
...     print(book.title)
...
C #
Java
python
PHP
------------------------------------------------
>>> book5 = Book.objects.get(id=5)
>>> book5.authors.all()
<QuerySet [<Author: Author object (4)>]>
>>> for author in book5.authors.all():
...     print(author.first_name)
...
Bill
------------------------------------------------
end

